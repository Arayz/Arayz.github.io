<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.0.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2016-05-30T18:19:25+08:00</updated><id>/</id><title>ÈòøÁëû@„ÅÜ„Åï„Åé„ÅÆÁ©¥üê∞</title><subtitle></subtitle><author><name>@r4y2</name><email>arayz_w@icloud.com</email></author><entry><title>An universal way to fuzz a running process by using AFL</title><link href="/dr01d-s3c/An-universal-way-to-fuzz-a-running-process-by-using-AFL/" rel="alternate" type="text/html" title="An universal way to fuzz a running process by using AFL" /><published>2016-05-30T00:00:00+08:00</published><updated>2016-05-30T00:00:00+08:00</updated><id>/dr01d-s3c/An-universal-way-to-fuzz-a-running-process-by-using-AFL</id><content type="html" xml:base="/dr01d-s3c/An-universal-way-to-fuzz-a-running-process-by-using-AFL/">&lt;p&gt;In &lt;a href=&quot;http://arayz.github.io/dr01d-s3c/AFL-on-Android/&quot;&gt;AFL on Android&lt;/a&gt;, I introduced how 
am I porting AFL from Linux to Android. It‚Äôs certainly that AFL could run on Android as 
it running on Linux, but I ran into a stone wall when I try to fuzz system_server on 
Android, the difficulty is AFL dosen‚Äôt support for fuzzing an running process officially. 
Android system service dosen‚Äôt provide any dirrect interface to transact data to its 
bussiness logic. AFL observe and send test cases by forking a subprocess to execute the 
tartget binary file, and system_server boots up in a very earlly time before all zygote 
processes.&lt;/p&gt;

&lt;p&gt;An easily-come-up way to solve this problem is editting init.rc to let afl-fuzz boots up 
app_process so that system_server becomes afl-fuzz‚Äôs subprocess. However, it‚Äôs difficult to 
put into effect because this is a big change to whole Android system.&lt;/p&gt;

&lt;p&gt;One another way is modifying source code of afl-fuzz to transact payload to system services 
instead pipe, this is a feasible scheme but I finally choose a universal way because it‚Äôs 
better not to modify code of an native program as possible.&lt;/p&gt;

&lt;p&gt;I design this as a bridge from afl-fuzz to target process. afl-fuzz execute bridge as 
subprocess and send test cases to it, bridge transact these test cases to target process 
and observe crashes by checking pid of it, bridge send back a signal by raise(SIGKILL) to 
afl-fuzz when target process gets crash. Both bridge and target process need to be instrumented 
by afl-gcc to get fork-server and coverage mesurements on.&lt;/p&gt;

&lt;p&gt;A difficult point is that afl-fuzz delivers fd of shared_mem to target process by setenv() 
in native architecture and it takes no effect to whole shell so that target process could 
not receive env of afl-fuzz in the bridge architecture, so a shared file is needed to deliver 
fd of shared_mem.&lt;/p&gt;

&lt;p&gt;The architecture is as follows:
&lt;img src=&quot;/images/afl_arch.jpg&quot; alt=&quot;arch&quot; /&gt;&lt;/p&gt;</content><category term="DR01D-S3C" /><category term="AFL" /><category term="Fuzz" /><summary>Fuzz a running process AFL to Android</summary></entry><entry><title>AFL on Android</title><link href="/dr01d-s3c/AFL-on-Android/" rel="alternate" type="text/html" title="AFL on Android" /><published>2016-05-08T00:00:00+08:00</published><updated>2016-05-08T00:00:00+08:00</updated><id>/dr01d-s3c/AFL-on-Android</id><content type="html" xml:base="/dr01d-s3c/AFL-on-Android/">&lt;p&gt;AFL(American Fuzzy Lop) is a powerful fuzzer for binary on Linux, it employs 
genetic algorithms to discover interesting signals in runtime, but it doesn‚Äô
support for running on Android officially, so I just work to porting AFL to
Android and get afl-fuzz running on emulator with arch-x86.&lt;/p&gt;

&lt;p&gt;In order to porting completly, I have to cross compile afl-fuzz with bionic 
and use afl-gcc to instrument the binary I want to fuzz to get fork server 
and coverage measurements on.&lt;/p&gt;

&lt;p&gt;Compiling afl-fuzz is much easier than instrumening the binary, just put whole 
source folder to ‚Äú(AOSP)/development/‚Äù and execute ‚Äúmm‚Äù on the path with an 
Android.mk in it, but if you do so, you will just get some errors. The key 
problem is expecting shm on bionic, Android use ashmem to replace shm, so you 
need to use ashmem_create_region to create fd instead shmget, and just mmap 
the address instead shmat, when work is done, just munmap it instead shmctl.
Another one thing you need to do is to comment the termminal size check in the 
afl-fuzz.c, or the UI won‚Äôt appear as normal.&lt;/p&gt;

&lt;p&gt;The bigger challenge of porting AFL is instrumenting target binary. AFL‚Äôs 
documents tell me to set CC and CXX env to replace compiler but AOSP use cross 
compile toolchains and the makefile is so complicated. By reading afl-gcc.c, 
I found it just set some params to replace assembler to instrument instructions, 
and deliver remaining work to the original compiler when instumenting work is 
done, so I could just replace the original compiler and point the cross compile 
toolchain to get binary instrumented and cross compiled.The flow diagram is as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flow-diagram.jpg&quot; alt=&quot;flow-diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To replace compiler, just add LOCAL_CXX and LOCAL_CC to your afl-gcc in Android.mk,
set AFL_CXX, AFL_CC and AFL_AS to your AOSP cross compile toolchain. After that, 
execute ‚Äúlunch‚Äù to choose arch-x86 product and ‚Äúmm‚Äù your source code.&lt;/p&gt;

&lt;p&gt;One last problem is the shell code to be instrument produced by official AFL is x86 
based only, and it containing shm calling instructions, so you need to write ashmem 
calling shell codes to replace them, and you need to rewrite whole shell codes of AFL 
if you want to porting AFL to arch-arm, that‚Äôs potential work to do in the future.&lt;/p&gt;

&lt;p&gt;I made afl-fuzz running on Android-5.1.1-x86 successfully, and I add param ‚Äò-t 100‚Äô to 
give emulator some more time to wait for signals because the binary running on emulator 
is much slower than host PC.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/afl-fuzz.jpg&quot; alt=&quot;afl-fuzz&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sorry code is not published yet.&lt;/p&gt;</content><category term="DR01D-S3C" /><category term="AFL" /><category term="fuzz" /><category term="porting" /><summary>Porting AFL to Android</summary></entry><entry><title>Pure</title><link href="/ch402/Pure/" rel="alternate" type="text/html" title="Pure" /><published>2016-05-02T00:00:00+08:00</published><updated>2016-05-02T00:00:00+08:00</updated><id>/ch402/Pure</id><content type="html" xml:base="/ch402/Pure/">&lt;p&gt;I took one whole holiday to set up this blog system on github pages. It‚Äôs been near a year since I ungraduated from college and never take a real holiday.&lt;/p&gt;

&lt;p&gt;I just work on mobile security research and get intervolution with my fear and anger.
Maybe the difference between they and me is I‚Äôm lack of some pure. Abandoning emotion is
too hard for me and they just exceed me with this.&lt;/p&gt;

&lt;p&gt;Can it ferment if I keep immersioning in emotion?&lt;/p&gt;</content><category term="CH402" /><category term="Pure" /><summary>The first blog</summary></entry></feed>
